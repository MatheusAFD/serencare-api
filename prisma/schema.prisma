generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now()) @updatedAt
  deleted_at DateTime?

  name     String
  email    String     @unique
  password String
  genre    GenreType?
  birthday DateTime?

  companyId String
  roleId    String
  company   Company @relation(fields: [companyId], references: [id])
  role      Role    @relation(fields: [roleId], references: [id])

  employee Employee?
}

model Employee {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now()) @updatedAt
  deleted_at DateTime?

  name   String
  status StatusType
  color  String

  userId String @unique
  user   User   @relation(fields: [userId], references: [id])
}

model Role {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now()) @updatedAt
  deleted_at DateTime?
  type       RoleType  @unique
  users      User[]
}

model Unit {
  id         String     @id @default(cuid())
  created_at DateTime   @default(now())
  updated_at DateTime   @default(now()) @updatedAt
  deleted_at DateTime?
  name       String
  city       String
  state      String
  zipcode    String
  number     String
  status     StatusType
  companyId  String
  room       Room[]
  company    Company    @relation(fields: [companyId], references: [id])
}

model Room {
  id         String     @id @default(cuid())
  created_at DateTime   @default(now())
  updated_at DateTime   @default(now()) @updatedAt
  deleted_at DateTime?
  name       String
  floor      String
  status     StatusType
  unitId     String
  unit       Unit       @relation(fields: [unitId], references: [id])
}

model Company {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now()) @updatedAt
  deleted_at DateTime?
  name       String
  cnpj       String?
  cpf        String?
  isActive   Boolean
  unit       Unit[]
  users      User[]

  activeCompanyPlan ActiveCompanyPlan?
}

model Plan {
  id                String              @id @default(cuid())
  created_at        DateTime            @default(now())
  updated_at        DateTime            @default(now()) @updatedAt
  deleted_at        DateTime?
  name              String
  duration          Int
  amount            Float
  isFree            Boolean
  isTrial           Boolean
  activeCompanyPlan ActiveCompanyPlan[]
}

model ActiveCompanyPlan {
  id                          String    @id @default(cuid())
  created_at                  DateTime  @default(now())
  updated_at                  DateTime  @default(now()) @updatedAt
  deleted_at                  DateTime?
  startDate                   DateTime
  endDate                     DateTime
  isActive                    Boolean
  remainingDaysWithActivePlan Int
  planId                      String
  companyId                   String    @unique
  plan                        Plan      @relation(fields: [planId], references: [id])
  company                     Company   @relation(fields: [companyId], references: [id])
}

enum RoleType {
  USER
  ADMIN
  SUPER_ADMIN
}

enum StatusType {
  active
  inactive
}

enum GenreType {
  male
  female
  other
}
