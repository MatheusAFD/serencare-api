generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String     @id @default(cuid())
  created_at DateTime   @default(now())
  updated_at DateTime   @default(now()) @updatedAt
  deleted_at DateTime?
  name       String
  email      String     @unique
  password   String
  companyId  String
  roleId     String
  birthday   DateTime?
  genre      GenreType?
  employee   Employee?
  company    Company    @relation(fields: [companyId], references: [id])
  role       Role       @relation(fields: [roleId], references: [id])
}

model Employee {
  id         String     @id @default(cuid())
  created_at DateTime   @default(now())
  updated_at DateTime   @default(now()) @updatedAt
  deleted_at DateTime?
  name       String
  status     StatusType
  color      String
  userId     String     @unique
  companyId  String
  company    Company    @relation(fields: [companyId], references: [id])
  user       User       @relation(fields: [userId], references: [id])
}

model Role {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now()) @updatedAt
  deleted_at DateTime?
  type       RoleType  @unique
  users      User[]
}

model Unit {
  id         String     @id @default(cuid())
  created_at DateTime   @default(now())
  updated_at DateTime   @default(now()) @updatedAt
  deleted_at DateTime?
  city       String
  state      String
  zipcode    String
  number     String
  companyId  String
  status     StatusType
  name       String
  room       Room[]
  company    Company    @relation(fields: [companyId], references: [id])
}

model Room {
  id         String     @id @default(cuid())
  created_at DateTime   @default(now())
  updated_at DateTime   @default(now()) @updatedAt
  deleted_at DateTime?
  name       String
  floor      String
  unitId     String
  status     StatusType
  unit       Unit       @relation(fields: [unitId], references: [id])
}

model Company {
  id                String             @id @default(cuid())
  created_at        DateTime           @default(now())
  updated_at        DateTime           @default(now()) @updatedAt
  deleted_at        DateTime?
  name              String
  cnpj              String?
  cpf               String?
  isActive          Boolean
  activeCompanyPlan ActiveCompanyPlan?
  unit              Unit[]
  users             User[]
  Employee          Employee[]
}

model Plan {
  id                String              @id @default(cuid())
  created_at        DateTime            @default(now())
  updated_at        DateTime            @default(now()) @updatedAt
  deleted_at        DateTime?
  duration          Int
  isTrial           Boolean
  amount            Float
  isFree            Boolean
  name              String
  activeCompanyPlan ActiveCompanyPlan[]
}

model ActiveCompanyPlan {
  id                          String    @id @default(cuid())
  created_at                  DateTime  @default(now())
  updated_at                  DateTime  @default(now()) @updatedAt
  deleted_at                  DateTime?
  startDate                   DateTime
  endDate                     DateTime
  isActive                    Boolean
  remainingDaysWithActivePlan Int
  planId                      String
  companyId                   String    @unique
  company                     Company   @relation(fields: [companyId], references: [id])
  plan                        Plan      @relation(fields: [planId], references: [id])
}

enum RoleType {
  USER
  ADMIN
  SUPER_ADMIN
}

enum StatusType {
  active
  inactive
}

enum GenreType {
  male
  female
  other
}
